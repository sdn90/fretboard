{"version":3,"sources":["Fret.tsx","FretNote.tsx","Fretboard.tsx","Scale.ts","NoteFilterForm.tsx","FretboardDisplaySettings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Fret","props","inlayRange","Array","from","inlayCount","className","style","width","map","viewBox","opacity","fill","cx","cy","r","stroke","strokeOpacity","strokeWidth","zIndex","children","FretNote","display","NoteDisplay","PitchClass","note","pc","ScaleDegree","romanNumeral","name","color","backgroundColor","Fretboard","stringNotes","tuning","openStringNote","notes","i","fretLength","push","Tonal","transpose","Interval","fromSemitones","concat","slice","reverse","fretsRange","maxWidth","overflowX","WebkitOverflowScrolling","padding","userSelect","WebkitUserSelect","f","key","Math","log2","fretNumber","includes","textAlign","flexDirection","arr","arr2d","verticalSlice","n","x","index","bgColor","scaleDegreeIndex","selectedScale","scaleNote","chroma","indexOf","noteDisplay","fontSize","Accidental","TUNING_PRESETS","EADG","BEADG","FretboardDisplaySettingsForm","marginRight","htmlFor","id","onChange","e","target","value","displaySettings","disabled","marginLeft","size","type","fretCount","parseInt","NoteFilterForm","useState","initialValue","tonic","selectedTonic","setSelectedTonic","Natural","selectedAccidental","setSelectedAccidental","octave","selectedOctave","selectedScaleName","setSelectedScaleName","useEffect","s","Scale","scale","margin","fontWeight","background","border","cursor","onClick","Flat","Sharp","a","accidental","accidentalName","defaultValue","App","PitchNotation","fretboardDisplaySettings","setFretboardDisplaySettings","c3major","setSelectedScale","justifyContent","alignItems","paddingLeft","fontFamily","romanStr","firstLetter","FLAT","SHARP","replaceAccidentalUnicode","interval","intervals","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a070936b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Fret.css\";\n\ninterface FretProps {\n  width: number;\n  children: React.ReactNode;\n  inlayCount: number;\n}\n\nexport default function Fret(props: FretProps) {\n  const inlayRange = Array.from(Array(props.inlayCount));\n  return (\n    <div className=\"fret-container\" style={{ width: props.width }}>\n      <div className=\"fret-inlay-container\">\n        {inlayRange.map(() => (\n          <svg viewBox=\"0 0 100 100\" width=\"20\" style={{ opacity: 1 }}>\n            <circle\n              fill=\"#fff\"\n              cx={50}\n              cy={50}\n              r={45}\n              stroke=\"#aaa\"\n              strokeOpacity={0.2}\n              strokeWidth={8}\n            ></circle>\n          </svg>\n        ))}\n      </div>\n      <div style={{ zIndex: 1 }}>{props.children}</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Tonal } from \"@tonaljs/modules\";\nimport \"./FretNote.css\";\nimport { NoteDisplay } from \"./App\";\n\ninterface FretNoteProps {\n  note: Tonal.Note;\n  display: NoteDisplay;\n  color: string;\n  backgroundColor: string;\n  romanNumeral?: string;\n}\n\nexport default function FretNote(props: FretNoteProps) {\n  let display;\n  switch (props.display) {\n    case NoteDisplay.PitchClass:\n      display = props.note.pc;\n      break;\n    case NoteDisplay.ScaleDegree:\n      display = props.romanNumeral ? props.romanNumeral : props.note.name;\n      break;\n    default:\n      display = props.note.name;\n      break;\n  }\n  return (\n    <div className=\"fret-note-container\">\n      <div\n        className=\"fret-note-circle\"\n        style={{ color: props.color, backgroundColor: props.backgroundColor }}\n      >\n        <div>{display}</div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Tonal, Interval } from \"@tonaljs/modules\";\nimport Fret from \"./Fret\";\nimport FretNote from \"./FretNote\";\nimport { NoteDisplay } from \"./App\";\nimport { Scale, noteIndexToRoman } from \"./Scale\";\n\ninterface FretboardProps {\n  tuning: Tonal.Note[];\n  fretLength: number;\n  noteDisplay: NoteDisplay;\n  selectedScale: Scale;\n}\n\nfunction calcInlay(fretNumber: number): number {\n  const single = [3, 5, 7, 9, 15, 17, 19];\n  if (single.includes(fretNumber)) {\n    return 1;\n  } else if (fretNumber === 12) {\n    return 2;\n  } else {\n    return 0;\n  }\n}\n\nexport default function Fretboard(props: FretboardProps) {\n  const stringNotes: Tonal.Note[][] = props.tuning\n    .map(openStringNote => {\n      const notes = [];\n      for (let i = 1; i < props.fretLength + 1; i++) {\n        notes.push(\n          Tonal.note(\n            Tonal.transpose(openStringNote.name, Interval.fromSemitones(i))\n          ) as Tonal.Note\n        );\n      }\n      return [openStringNote].concat(notes);\n    })\n    .slice()\n    .reverse();\n\n  const fretsRange = Array.from(Array(props.fretLength + 1));\n\n  return (\n    <div\n      style={{\n        maxWidth: \"100%\",\n        overflowX: \"scroll\",\n        WebkitOverflowScrolling: \"touch\",\n        padding: 8,\n        userSelect: \"none\",\n        WebkitUserSelect: \"none\"\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\"\n        }}\n      >\n        {fretsRange.map((f, i) => {\n          return (\n            <Fret\n              key={i}\n              width={i === 0 ? 48 : 128 - Math.log2(i) * 17.817}\n              inlayCount={calcInlay(i)}\n            >\n              <div\n                style={{\n                  textAlign: \"center\",\n                  display: \"flex\",\n                  flexDirection: \"column\"\n                }}\n              >\n                {verticalSlice(stringNotes, i).map(n => {\n                  let bgColor = \"#ccc\";\n                  let color = \"#fff\";\n                  const scaleDegreeIndex = props.selectedScale.notes\n                    .map(scaleNote => Tonal.note(scaleNote)?.chroma as number)\n                    .indexOf(n.chroma);\n                  if (scaleDegreeIndex > -1 && scaleDegreeIndex < 7) {\n                    bgColor = hsla([220, 0.8, 0.55, 1]);\n                  }\n                  return (\n                    <FretNote\n                      display={props.noteDisplay}\n                      note={n}\n                      romanNumeral={noteIndexToRoman(scaleDegreeIndex)}\n                      backgroundColor={bgColor}\n                      color={color}\n                    />\n                  );\n                })}\n              </div>\n\n              <div\n                style={{\n                  backgroundColor: \"#fff\",\n                  fontSize: 12,\n                  padding: 8,\n                  textAlign: \"center\",\n                  color: \"#999\"\n                }}\n              >\n                {i}\n              </div>\n            </Fret>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\nfunction verticalSlice<T>(arr: T[][], i: number): T[] {\n  return arr.map(arr2d => arr2d[i]);\n}\n\nfunction rgba(x: [number, number, number, number]): string {\n  return `rgba(${x.join(\",\")})`;\n}\n\nfunction hsla(x: [number, number, number, number]): string {\n  return `hsla(${x[0]}, ${x[1] * 100}%, ${x[2] * 100}%, ${x[3]})`;\n}\n","import { ScaleDictionary, Tonal } from \"@tonaljs/modules\";\n\nexport interface Scale extends ScaleDictionary.ScaleType {\n  tonic: string | null;\n  type: string;\n  notes: Tonal.NoteName[];\n}\n\nexport function noteIndexToRoman(index: number) {\n  return [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"][index];\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Scale } from \"@tonaljs/modules\";\nimport { Scale as IScale } from \"./Scale\";\nimport { ReactComponent as FlatSVG } from \"./Flat.svg\";\n\ninterface NoteFilterFormProps {\n  initialValue: {\n    tonic: string;\n    octave: string;\n    name: string;\n  };\n  onChange: (scale: IScale) => void;\n}\n\nenum Accidental {\n  Natural = \"\",\n  Flat = \"b\",\n  Sharp = \"#\"\n}\n\nexport default function NoteFilterForm(props: NoteFilterFormProps) {\n  const [selectedTonic, setSelectedTonic] = useState(props.initialValue.tonic);\n  const [selectedAccidental, setSelectedAccidental] = useState<Accidental>(\n    Accidental.Natural\n  );\n  const [selectedOctave, setSelectedOctave] = useState(\n    props.initialValue.octave\n  );\n  const [selectedScaleName, setSelectedScaleName] = useState(\n    props.initialValue.name\n  );\n\n  useEffect(() => {\n    const s = Scale.scale(\n      `${selectedTonic}${selectedAccidental}${selectedOctave} ${selectedScaleName}`\n    );\n    props.onChange(s);\n  }, [\n    selectedTonic,\n    selectedOctave,\n    selectedAccidental,\n    selectedScaleName,\n    props.onChange\n  ]);\n\n  return (\n    <div>\n      <div>\n        <div>\n          <h4 style={{ margin: 0, color: \"#ccc\" }}>Tonic</h4>\n          {[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"].map(tonic => (\n            <button\n              style={{\n                display: \"inline-block\",\n                marginRight: 64,\n                fontSize: 32,\n                fontWeight: 700,\n                background: \"none\",\n                border: 0,\n                padding: 0,\n                cursor: \"pointer\",\n                color: tonic === selectedTonic ? \"rgb(120, 116, 255)\" : \"#222\"\n              }}\n              onClick={() => setSelectedTonic(tonic)}\n            >\n              {tonic}\n            </button>\n          ))}\n        </div>\n        <div>\n          <div style={{ display: \"flex\", fontSize: 24, fontWeight: 600 }}>\n            {[Accidental.Natural, Accidental.Flat, Accidental.Sharp].map(a => {\n              return (\n                <div\n                  style={{\n                    marginRight: 32,\n                    color: selectedAccidental === a ? \"purple\" : \"#111\"\n                  }}\n                  onClick={() => setSelectedAccidental(a)}\n                >\n                  {accidentalName(a)}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        <div>\n          <h3 style={{ color: \"#ccc\" }}>Name</h3>\n          <select\n            onChange={e => setSelectedScaleName(e.target.value)}\n            defaultValue={selectedScaleName}\n          >\n            <option value=\"major\">Major</option>\n            <option value=\"minor\">Minor</option>\n            <option value=\"dorian\">Dorian</option>\n            <option value=\"major pentatonic\">Major Pentatonic</option>\n          </select>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction accidentalName(accidental: Accidental): string {\n  switch (accidental) {\n    case Accidental.Flat:\n      return \"Flat\";\n    case Accidental.Sharp:\n      return \"Sharp\";\n    case Accidental.Natural:\n      return \"Natural\";\n  }\n}\n\n","import React from \"react\";\nimport { NoteDisplay } from \"./App\";\nimport { Tonal } from \"@tonaljs/modules\";\n\nexport interface FretboardDisplaySettings {\n  tuning: Tonal.Note[];\n  noteDisplay: NoteDisplay;\n  fretCount: number;\n}\n\ninterface TuningPresets {\n  [key: string]: Tonal.Note[];\n}\n\nexport const TUNING_PRESETS: TuningPresets = {\n  EADG: [\"E2\", \"A2\", \"D3\", \"G3\"].map(Tonal.note) as Tonal.Note[],\n  BEADG: [\"B1\", \"E2\", \"A2\", \"D3\", \"G3\"].map(Tonal.note) as Tonal.Note[]\n};\n\nexport interface FretboardDisplaySettingsFormProps {\n  displaySettings: FretboardDisplaySettings;\n  onChange: (settings: FretboardDisplaySettings) => void;\n}\n\nexport default function FretboardDisplaySettingsForm(\n  props: FretboardDisplaySettingsFormProps\n) {\n  function onTuningChange(name: string) {\n    props.onChange({ ...props.displaySettings, tuning: TUNING_PRESETS[name] });\n  }\n\n  return (\n    <div\n      style={{\n        marginRight: 8\n      }}\n    >\n      <div style={{ display: \"flex\" }}>\n        <div>\n          <div>\n            <label htmlFor=\"display-settings-tuning\">\n              <small>Tuning</small>\n            </label>\n          </div>\n          <select\n            id=\"display-settings-tuning\"\n            style={{ padding: 4 }}\n            onChange={e => onTuningChange(e.target.value)}\n          >\n            <option disabled>Bass</option>\n            <option value=\"EADG\">EADG</option>\n            <option value=\"BEADG\">BEADG</option>\n            <option disabled>Guitar</option>\n            <option value=\"EADG\">EADGBE</option>\n            <option value=\"DADGBE\">DADGBE</option>\n          </select>\n        </div>\n\n        <div style={{ marginLeft: 16 }}>\n          <label>\n            <small>Fret count</small>\n          </label>\n          <div>\n            <input\n              size={4}\n              type=\"number\"\n              value={props.displaySettings.fretCount}\n              onChange={e =>\n                props.onChange({\n                  ...props.displaySettings,\n                  fretCount: parseInt(e.target.value)\n                })\n              }\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Fretboard from \"./Fretboard\";\nimport { Scale } from \"@tonaljs/modules\";\nimport { romanNumeral } from \"@tonaljs/roman-numeral\";\nimport FretboardDisplaySettingsForm, {\n  FretboardDisplaySettings,\n  TUNING_PRESETS\n} from \"./FretboardDisplaySettings\";\nimport NoteFilterForm from \"./NoteFilterForm\";\nimport { Scale as IScale, noteIndexToRoman } from \"./Scale\";\nimport { interval } from \"@tonaljs/tonal\";\nexport enum NoteDisplay {\n  PitchClass = \"Pitch Class\",\n  PitchNotation = \"Pitch Notation\",\n  ScaleDegree = \"Scale Degree\"\n}\n\nconst App: React.FC = () => {\n  const [fretboardDisplaySettings, setFretboardDisplaySettings] = useState<\n    FretboardDisplaySettings\n  >({\n    noteDisplay: NoteDisplay.PitchNotation,\n    fretCount: 22,\n    tuning: TUNING_PRESETS.EADG\n  });\n\n  const c3major = Scale.scale(\"C3 major\");\n  const [selectedScale, setSelectedScale] = useState<IScale>(c3major);\n\n  return (\n    <div className=\"App\">\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\"\n        }}\n      >\n        <h1 style={{ paddingLeft: 8, fontSize: 96, margin: 0, color: \"#333\" }}>\n          Fretboard\n        </h1>\n        <FretboardDisplaySettingsForm\n          displaySettings={fretboardDisplaySettings}\n          onChange={setFretboardDisplaySettings}\n        />\n      </div>\n      <Fretboard\n        tuning={fretboardDisplaySettings.tuning}\n        fretLength={fretboardDisplaySettings.fretCount}\n        noteDisplay={fretboardDisplaySettings.noteDisplay}\n        selectedScale={selectedScale}\n      />\n\n      <div>\n        <div\n          style={{\n            padding: 8,\n            display: \"flex\",\n            alignItems: \"center\",\n            backgroundColor: \"#222\",\n            color: \"#fff\"\n          }}\n        >\n          <h1 style={{ margin: 0, fontSize: 64 }}>{selectedScale.name}</h1>\n          {/* <small>{selectedScale.aliases.map(capitalize).join(\", \")}</small> */}\n          <div style={{ display: \"flex\", marginLeft: 64 }}>\n            {selectedScale.notes.map((note, index) => {\n              return (\n                <div\n                  style={{\n                    marginRight: 32,\n                    textAlign: \"center\"\n                  }}\n                >\n                  <div style={{ fontSize: 24, fontWeight: 600 }}>{note}</div>\n                  <div\n                    style={{\n                      fontSize: 16,\n                      fontFamily: \"Times New Roman\"\n                    }}\n                  >\n                    {replaceAccidentalUnicode(\n                      romanNumeral(interval(selectedScale.intervals[index]))\n                        .name\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        <div style={{ padding: 8 }}>\n          <NoteFilterForm\n            initialValue={{ tonic: \"C\", name: \"major\", octave: \"3\" }}\n            onChange={setSelectedScale}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\nconst FLAT = \"♭\";\nconst SHARP = \"♯\";\n\nfunction replaceAccidentalUnicode(romanStr: string): string {\n  const firstLetter = romanStr[0];\n  if (firstLetter === \"b\") {\n    return FLAT + romanStr.slice(1);\n  } else if (firstLetter === \"#\") {\n    return SHARP + romanStr.slice(1);\n  } else {\n    return romanStr;\n  }\n}\n\nfunction capitalize(str: string): string {\n  return str[0].toUpperCase() + str.slice(1);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}