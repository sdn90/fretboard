{"version":3,"sources":["Fret.tsx","FretNote.tsx","Fretboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Fret","props","inlayRange","Array","from","inlayCount","className","style","width","map","viewBox","opacity","fill","cx","cy","r","zIndex","children","FretNote","display","NoteDisplay","PitchClass","note","pc","name","filtered","Fretboard","stringNotes","tuning","openStringNote","notes","i","fretLength","push","Tonal","transpose","Interval","fromSemitones","concat","slice","reverse","fretsRange","maxWidth","overflowX","WebkitOverflowScrolling","padding","userSelect","WebkitUserSelect","f","key","Math","log2","fretNumber","includes","textAlign","flexDirection","arr","arr2d","verticalSlice","n","noteDisplay","noteFilters","length","some","filter","fn","backgroundColor","fontSize","color","TUNING_PRESETS","EADG","BEADG","App","useState","setTuning","fretCount","setFretCount","PitchNotation","setNoteDisplay","Scale","scale","setNoteFilters","margin","onChange","e","target","value","marginLeft","type","parseInt","defaultValue","marginTop","marginBottom","nf","index","onClick","removeNoteFilter","letter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f7a065b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Fret.css\";\n\ninterface FretProps {\n  width: number;\n  children: React.ReactNode;\n  inlayCount: number;\n}\n\nexport default function Fret(props: FretProps) {\n  const inlayRange = Array.from(Array(props.inlayCount));\n  return (\n    <div className=\"fret-container\" style={{ width: props.width }}>\n      <div className=\"fret-inlay-container\">\n        {inlayRange.map(() => (\n          <svg viewBox=\"0 0 100 100\" width=\"16\" style={{ opacity: 0.5 }}>\n            <circle fill=\"#fff\" cx={50} cy={50} r={50}></circle>\n          </svg>\n        ))}\n      </div>\n      <div style={{ zIndex: 1 }}>{props.children}</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Tonal } from \"@tonaljs/modules\";\nimport \"./FretNote.css\";\nimport { NoteDisplay } from \"./App\";\n\ninterface FretNoteProps {\n  note: Tonal.Note;\n  display: NoteDisplay;\n  filtered: boolean;\n}\n\nexport default function FretNote(props: FretNoteProps) {\n  let display;\n  switch (props.display) {\n    case NoteDisplay.PitchClass:\n      display = props.note.pc;\n      break;\n    default:\n      display = props.note.name;\n      break;\n  }\n  return (\n    <div className=\"fret-note-container\">\n      <div\n        className={`fret-note-circle${\n          props.filtered ? \" fret-note-filtered\" : \"\"\n        }`}\n        style={{ opacity: props.filtered ? 1 : 0.2 }}\n      >\n        {display}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Tonal, Interval } from \"@tonaljs/modules\";\nimport Fret from \"./Fret\";\nimport FretNote from \"./FretNote\";\nimport { NoteDisplay, NoteFilter } from \"./App\";\n\ninterface FretboardProps {\n  tuning: Tonal.Note[];\n  fretLength: number;\n  noteDisplay: NoteDisplay;\n  noteFilters: NoteFilter[];\n}\n\nfunction calcInlay(fretNumber: number): number {\n  const single = [3, 5, 7, 9, 15, 17, 19];\n  if (single.includes(fretNumber)) {\n    return 1;\n  } else if (fretNumber === 12) {\n    return 2;\n  } else {\n    return 0;\n  }\n}\n\nexport default function Fretboard(props: FretboardProps) {\n  const stringNotes: Tonal.Note[][] = props.tuning\n    .map(openStringNote => {\n      const notes = [];\n      for (let i = 1; i < props.fretLength; i++) {\n        notes.push(\n          Tonal.note(\n            Tonal.transpose(openStringNote.name, Interval.fromSemitones(i))\n          ) as Tonal.Note\n        );\n      }\n      return [openStringNote].concat(notes);\n    })\n    .slice()\n    .reverse();\n\n  const fretsRange = Array.from(Array(props.fretLength));\n\n  return (\n    <div\n      style={{\n        maxWidth: \"100%\",\n        overflowX: \"scroll\",\n        WebkitOverflowScrolling: \"touch\",\n        padding: 8,\n        userSelect: \"none\",\n        WebkitUserSelect: \"none\"\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\"\n        }}\n      >\n        {fretsRange.map((f, i) => {\n          return (\n            <Fret\n              key={i}\n              width={i === 0 ? 48 : 128 - Math.log2(i) * 17.817}\n              inlayCount={calcInlay(i)}\n            >\n              <div\n                style={{\n                  textAlign: \"center\",\n                  display: \"flex\",\n                  flexDirection: \"column\"\n                }}\n              >\n                {verticalSlice(stringNotes, i).map(n => (\n                  <FretNote\n                    display={props.noteDisplay}\n                    note={n}\n                    filtered={\n                      props.noteFilters.length\n                        ? props.noteFilters.some(filter => filter.fn(n))\n                        : false\n                    }\n                  />\n                ))}\n                <div\n                  style={{\n                    backgroundColor: \"#fff\",\n                    fontSize: 12,\n                    padding: 8,\n                    color: \"#999\"\n                  }}\n                >\n                  {i}\n                </div>\n              </div>\n            </Fret>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\nfunction verticalSlice<T>(arr: T[][], i: number): T[] {\n  return arr.map(arr2d => arr2d[i]);\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Fretboard from \"./Fretboard\";\nimport { Tonal, Scale } from \"@tonaljs/modules\";\nimport { prependOnceListener } from \"cluster\";\n\ninterface TuningPresets {\n  [key: string]: Tonal.Note[];\n}\nconst TUNING_PRESETS: TuningPresets = {\n  EADG: [\"E2\", \"A2\", \"D3\", \"G3\"].map(Tonal.note) as Tonal.Note[],\n  BEADG: [\"B1\", \"E2\", \"A2\", \"D3\", \"G3\"].map(Tonal.note) as Tonal.Note[]\n};\n\nexport interface NoteFilter {\n  name: string;\n  fn: (note: Tonal.Note) => boolean;\n}\n\nexport enum NoteDisplay {\n  PitchClass = \"Pitch Class\",\n  PitchNotation = \"Pitch Notation\"\n}\n\nconst App: React.FC = () => {\n  const [tuning, setTuning] = useState<Tonal.Note[]>(TUNING_PRESETS.EADG);\n  const [fretCount, setFretCount] = useState(22);\n  const [noteDisplay, setNoteDisplay] = useState(NoteDisplay.PitchNotation);\n  const [noteFilters, setNoteFilters] = useState<NoteFilter[]>([\n    {\n      name: \"C Major\",\n      fn: note => Scale.scale(\"C major\").notes.includes(note.pc)\n    }\n  ]);\n\n  function onTuningChange(name: string) {\n    setTuning(TUNING_PRESETS[name]);\n  }\n\n  function removeNoteFilter(index: number) {\n    setNoteFilters(noteFilters.filter((nf, i) => i !== index));\n  }\n\n  return (\n    <div className=\"App\">\n      <Fretboard\n        tuning={tuning}\n        fretLength={fretCount}\n        noteDisplay={noteDisplay}\n        noteFilters={noteFilters}\n      />\n\n      <h5 style={{ padding: 8, margin: 0 }}>Display Settings</h5>\n      <div style={{ display: \"flex\", padding: 8 }}>\n        <div>\n          <div>\n            <label>Tuning</label>\n          </div>\n          <select onChange={e => onTuningChange(e.target.value)}>\n            <option value=\"EADG\">EADG</option>\n            <option value=\"BEADG\">BEADG</option>\n          </select>\n        </div>\n\n        <div style={{ marginLeft: 16 }}>\n          <label>Fret count</label>\n          <div>\n            <input\n              type=\"number\"\n              value={fretCount}\n              onChange={e => setFretCount(parseInt(e.target.value))}\n            />\n          </div>\n        </div>\n\n        <div style={{ marginLeft: 16 }}>\n          <label>Note Display</label>\n          <div>\n            <select\n              onChange={e => setNoteDisplay(e.target.value as NoteDisplay)}\n              defaultValue={noteDisplay}\n            >\n              <option value={NoteDisplay.PitchClass}>\n                {NoteDisplay.PitchClass}\n              </option>\n              <option value={NoteDisplay.PitchNotation}>\n                {NoteDisplay.PitchNotation}\n              </option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div style={{ marginTop: 16, padding: 8 }}>\n        <div>Active filters</div>\n        <div style={{ marginBottom: 16 }}>\n          {noteFilters.map((nf, index) => {\n            return (\n              <div>\n                {nf.name}{\" \"}\n                <button onClick={() => removeNoteFilter(index)}>X</button>\n              </div>\n            );\n          })}\n        </div>\n\n        <div>Scales</div>\n        <select>\n          {[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"].map(letter => (\n            <option value={letter}>{letter}</option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}